#!/usr/bin/env node

/*
Module dependencies.
*/

// load global config variables
// const config = require('../config/config');

var app = require('../app');
/*
Create HTTP server.
*/
if (global.config.https === 'heroku') {
  var https = require('https');
  //var server = https.createServer(httpsOptions,app);
  var server = https.createServer(app);
} else if (global.config.https === 'manual') {
  const fs = require('fs');
  var httpsOptions = {
    key: fs.readFileSync('./certs/key.pem'),
    cert: fs.readFileSync('./certs/cert.pem')
  };
  var https = require('https');
  //var server = https.createServer(httpsOptions,app);
  var server = https.createServer(httpsOptions, app);
} else {
  var http = require('http');
  var server = http.createServer(app);
}

/*
Get port from environment and store in Express.
*/
var port = normalizePort(global.config.port || 5000);
app.set('port', port);

/*
Listen on provided port, on all network interfaces.
*/
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/*
Normalize a port into a number, string, or false.
*/
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/*
Event listener for HTTP server "error" event.
*/
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
  case 'EACCES':
    console.error(bind + ' requires elevated privileges');
    process.exit(1);
    break;
  case 'EADDRINUSE':
    console.error(bind + ' is already in use');
    process.exit(1);
    break;
  default:
    throw error;
  }
}

/*
Event listener for HTTP server "listening" event.
*/

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
}